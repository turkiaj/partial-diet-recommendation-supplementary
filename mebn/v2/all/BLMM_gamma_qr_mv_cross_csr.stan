
data { 
  int<lower=0> N;   // number of observations
  int<lower=1> p;   // number of predictors
  int<lower=1> v;   // number of responses
  int<lower=1> J;   // number of groups in data (persons)
  int<lower=1> k;   // number of group-level predictors
  // dense matrix for fixed effects
  matrix[v*N,v*p] X;    // fixed-effect design matrix
  // sparse matrix for personal effects
  int Z_w_size;
  int Z_u_size;
  int Z_v_size;
  vector[Z_w_size] Z_w;    
  int Z_v[Z_v_size];    
  int Z_u[Z_u_size];
  vector[v*N] Y;   // stacked responses
  real offset;
} 

transformed data { 
  
  matrix[v*N,v] I;                // identity matrix for intercept
  vector[v] linear_transformation; // transforms all data to positive region
  vector[v*N] Y_t;               // transformed responses
  
  // QR reparameteratization of the model matrix
  // - reparamization matrices are stacked like X_t
  
  matrix[v*N, v*p] Q_ast;
  matrix[v*p, v*p] R_ast;
  matrix[v*p, v*p] R_ast_inverse;

  // thin and scale the QR decomposition
  Q_ast = qr_thin_Q(X) * sqrt(v*N - 1);
  R_ast = qr_thin_R(X) / sqrt(v*N - 1);
  R_ast_inverse = inverse(R_ast);
  
  linear_transformation = rep_vector(offset, v);
  I = rep_matrix(0,v*N,v);
  
  Y_t = Y + offset;
}

parameters { 
  // all parameters are vectorized based on response, 1..v
  // except personal effects are stacked in same matrices for estimating cross-covariance
  
  vector[v] beta_Intercept;         // intercept 
  //vector[v*(p-1)] beta;           // poulation-level effects (fixed effects)
  vector[v*p] theta_q;          // coefficients of Q_ast
  cholesky_factor_corr[v*J*k] L;    // Cholesky factor of group ranef corr matrix
  vector<lower=0>[v*k] sigma_b;     // group-level random-effect standard deviations
  vector[v*J*k] z;                  // unscaled group-level effects
  vector[v] g_log_alpha;            // alpha (shape) parameter of the gamma distribution
}

transformed parameters {
  vector[v] g_alpha;                // alpha (shape) parameter of each v gamma distribution
  //real<lower=0> sigma_e[v];       // residual standard deviations for each distribution v 
  vector[v*J*k] b;                  // group-level effects (random effects), k x J x v - coef x patient x response

  // Premultiply diagonal matrix [sigma_b] with the Cholesky decomposition L of
  // the correlation matrix Sigma_b to get variance-covariance matrix of group-level effects

  // local scope for Lambda matrix
  {
    // diag(sigma_b) * L
    matrix[v*J*k, v*J*k] Lambda;    // Tau * Cholesky decomposition
    
    Lambda = diag_pre_multiply(sigma_b, L); 

    // Group-level effects are generated by multipying D (Sigma_b) with z 
    // that has standard normal distribution
    b = Lambda * z;    
  }
  
  // - log transform alpha parameter to keep it positive
  g_alpha = exp(g_log_alpha);

    // estimate of variance 
    // (https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4024993/)
//    sigma_e[i] = log(1/g_alpha[i] + 1);
}

model {
  
    beta_Intercept ~ cauchy(0,10); // prior for the intercept following Gelman 2008
    sigma_b ~ student_t(3, 0, 10);
    
    // - standard normal prior for personal effects
    z ~ normal(0,1);

    // - LJK prior for personal effect Cholesky factor
    L ~ lkj_corr_cholesky(1);

  // brackets introduce a new scope for local variables that are not published in model
  {
    vector[v*N] mu;             // expected value 
    vector[v*N] g_beta;         // beta (rate) of Gamma distribution

     //  X_t[n] * beta is reparameterized as Q_ast * theta_q
     //mu[n] = beta_Intercept + offset + Q_ast[n] * theta_q + Z_t[n] * b[(i-1)*k+group[n]];
     
     //mu = I * beta_Intercept + I * linear_transformation + X_t * beta;
     //mu = I * beta_Intercept + I * linear_transformation + Q_ast * theta_q + csr_matrix_times_vector(v*N,v*(J*k),Z_w,Z_v,Z_u,b);
     mu = I * beta_Intercept + I * linear_transformation + Q_ast * theta_q;
     
     // identity link
     g_beta = I * g_alpha ./ mu;

     Y_t ~ gamma(I * g_alpha, g_beta);
  }

}

generated quantities {

  vector[v*p] beta;               // poulation-level effects (fixed effects)
  // corr_matrix[v*k] C;              // correlation matrix 
  // vector[N-NH] Y_rep[v];           // repeated response
  real Y_rep[v,N];                    // repeated response

  // //vector[N-NH] log_lik[v];       // log-likelihood for LOO
  // vector[k-1] personal_effect[J,v];
  // real personal_intercept[J,v];
  // int b_index;
  // 
  // // Correlation matrix of random-effects, C = L'L
  // C = multiply_lower_tri_self_transpose(L);
  // 
  // // Posterior predictive distribution for model checking

  // Unstack Y_rep to separate columns
  {
    real Y_rep_stacked[v*N];       // stacked training responses from all responses
    vector[v*N] mu_hat;            // expected value 
    vector[v*N] g_beta_hat;        // beta (rate) of Gamma distribution

    beta = R_ast_inverse * theta_q;     // coefficients on x

    //mu_hat = I * beta_Intercept + I * linear_transformation + XM_t * beta + ZM_t * b;
    mu_hat = I * beta_Intercept + I * linear_transformation + X * beta;
       
    // identity link
    g_beta_hat = I * g_alpha ./ mu_hat;
  
    Y_rep_stacked = gamma_rng(I * g_alpha, g_beta_hat);
    
    // transform repeated values back to original intercept
    for (i in 1:v)
    {
      for (n in 1:N)
      {
          Y_rep[i,n] = Y_rep_stacked[(i-1)*N+n] - offset;
      }
    }
  }

  // for (i in 1:v)
  // {
  //   b_index = (i-1)*k;
  //   beta[i] = R_ast_inverse[i] * theta_q[i];     // coefficients on x
  // 
  //   for (n in 1:N-NH) 
  //   {
  //     mu_hat = beta_Intercept[i] + offset + X_t[n] * beta[i] + Z_t[n] * b[b_index+group[n]];
  // 
  //     g_beta_hat = g_alpha[i] / mu_hat;
  // 
  //     Y_rep[i,n] = gamma_rng(g_alpha[i], g_beta_hat) - offset;
  // 
  //     // Compute log-Likelihood for LOO comparison of the models 
  //     //log_lik[i,n] = gamma_lpdf(Y_t[i,n] | g_alpha[i], g_beta_hat);
  //   }
  // 
  //   // Finally, sample personal effects for each nutrient
  //   for (j in 1:J) 
  //   {
  //     
  //     // personal intercept
  //     personal_intercept[j,i] = beta_Intercept[i] + b[j][b_index+1];
  // 
  //     // beta vector does not include intercept, b is also sliced not to include it
  //     personal_effect[j,i] = beta[i] + b[j][b_index+2:b_index+k];
  //   }
  // }

}


